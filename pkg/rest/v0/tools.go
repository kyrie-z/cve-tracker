package v0

import (
	"cve-tracker/pkg/db"
	"fmt"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
)

// Query log
func queryLogList(c *gin.Context) {
	var params = make(map[string]interface{})
	if product := c.Query("product"); len(product) != 0 {
		params["product"] = product
	}
	if operator := c.Query("operator"); len(operator) != 0 {
		params["operator"] = operator
	}
	if target := c.Query("target"); len(target) != 0 {
		params["target"] = target
	}
	if str := c.Query("action"); len(str) != 0 {
		action, _ := strconv.Atoi(str)
		if db.ValidAction(action) {
			params["action"] = action
		}
	}

	pageStr := c.DefaultQuery("page", "1")
	page, _ := strconv.Atoi(pageStr)
	countStr := c.DefaultQuery("count", "25")
	count, _ := strconv.Atoi(countStr)

	total, list, err := db.GetLogList(params, (page-1)*count, count)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}
	c.Header("X-Current-Page", fmt.Sprint(page))
	c.Header("X-Resource-Total", fmt.Sprint(total))
	c.Header("X-Page-Size", fmt.Sprint(count))
	c.JSON(http.StatusOK, &list)
}

/*
Statistics the current distribution and number of vulnerabilities.
Go back to low, middle, high, kernel, daily in turn.
*/
func getCount(c *gin.Context) {
	product := c.Param("product")
	if len(product) == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid product"})
		return
	}

	countList := make([]map[string]interface{}, 5) //[low, middle, high, kernel, daily ]
	status := [...]string{"Unprocessed", "Processing", "Postpone", "Hold", "Canceled", "Fixed"}
	for i, _ := range countList {
		countList[i] = make(map[string]interface{})
		for _, v := range status {
			if i == 0 {
				//低
				countList[i][v] = db.QueryCount("low", v, product)[:2]
			} else if i == 1 {
				//中
				countList[i][v] = db.QueryCount("medium", v, product)[:2]
			} else if i == 2 {
				//高
				countList[i][v] = db.QueryCount("high", v, product)[:2]
			} else if i == 3 {
				//kernel
				countList[i][v] = db.QueryCount("kernel", v, product)[:2]
			}
		}
		if i == 4 {
			//sys_daily and kernel_daily
			countList[i]["sys_daily"] = db.QueryCount("sys_daily", "", product)
			countList[i]["kernel_daily"] = db.QueryCount("kernel_daily", "", product)
			countList[i]["sys_new_daily"] = db.QueryCount("sys_new_daily", "", product)
			countList[i]["kernel_new_daily"] = db.QueryCount("kernel_new_daily", "", product)

		}
	}

	c.JSON(http.StatusOK, countList)
}
