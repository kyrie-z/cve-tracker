package v0

import (
	"cve-tracker/pkg/db"
	"cve-tracker/pkg/utils"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
)

func queryPrepackageList(c *gin.Context) {
	product := c.Param("product")
	if len(product) == 0 {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "invalid product",
		})
		return
	}
	pkgList, err := db.GetPackageList(product)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": err.Error(),
		})
		return
	}
	c.JSON(http.StatusOK, pkgList)
}

// Delete the previous pre-installed-package list and reload
func reloadPrepackage(c *gin.Context) {
	product := c.Param("product")
	if len(product) == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid product"})
		return
	}
	release := c.Param("release")
	res := utils.IsContain(db.ReleaseList, release)
	if res == false {
		c.JSON(http.StatusBadRequest, gin.H{"error": fmt.Sprintf("unknown release '%s'", release)})
		return
	}
	file, err := c.FormFile("packages")
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	dst := fmt.Sprintf("./data/%s-%s-packages", product, release)
	err = c.SaveUploadedFile(file, dst)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	err = db.ImportPackage(release, dst, product)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, "reload pre package list successfully")
}
