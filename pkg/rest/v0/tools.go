package v0

import (
	"cve-tracker/pkg/db"
	"cve-tracker/pkg/utils"
	"fmt"
	"net/http"
	"strconv"
	"time"

	"github.com/gin-gonic/gin"
)

func queryPrepackageList(c *gin.Context) {
	product := c.Param("product")
	if len(product) == 0 {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "invalid product",
		})
		return
	}
	pkgList, err := db.GetPackageList(product)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": err.Error(),
		})
		return
	}
	c.JSON(http.StatusOK, pkgList)
}

// Delete the previous pre-installed-package list and reload
func reloadPrepackage(c *gin.Context) {
	product := c.Param("product")
	if len(product) == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid product"})
		return
	}
	release := c.Param("release")
	res := utils.IsContain(db.ReleaseList, release)
	if res == false {
		c.JSON(http.StatusBadRequest, gin.H{"error": fmt.Sprintf("unknown release '%s'", release)})
		return
	}
	file, err := c.FormFile("pre-package")
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	dst := fmt.Sprintf("./data/%s-%s-pre-instlled-list-%s", product, release, time.Now().Format("2006-01-02"))
	err = c.SaveUploadedFile(file, dst)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	err = db.ImportPackage(product, release, dst)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	(&db.Log{
		Product:     product,
		Operator:    c.GetString("username"),
		Action:      db.LogActionInitPackage,
		Target:      fmt.Sprintf("%s-%s", product, release),
		Description: db.LogActionInitPackage.String() + ": " + fmt.Sprintf("%s-%s", product, release),
		Content:     "Init pre_installed list from " + dst,
		Time_at:     utils.NowTime(),
	}).InsertLog()
	c.JSON(http.StatusOK, "reload pre package list successfully")
}

//Upload the corresponding list of source-binary package and import the vulnerable source-binary to mariadb.
func reloadBinaryList(c *gin.Context) {
	product := c.Param("product")
	if len(product) == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid product"})
		return
	}
	file, err := c.FormFile("binary")
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	dst := fmt.Sprintf("./data/%s-source-binary-list-%s", product, time.Now().Format("2006-01-02"))
	err = c.SaveUploadedFile(file, dst)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	err = db.ImportBinary(product, dst)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	(&db.Log{
		Product:     product,
		Operator:    c.GetString("username"),
		Action:      db.LogActionInitPackage,
		Target:      product,
		Description: db.LogActionInitBinary.String() + ": " + product,
		Content:     "Init the vulnerable package's source-binary list from " + dst,
		Time_at:     utils.NowTime(),
	}).InsertLog()
	c.JSON(http.StatusOK, "reload binary of the source package list successfully")

}

// Query log
func queryLogList(c *gin.Context) {
	var params = make(map[string]interface{})
	if product := c.Query("product"); len(product) != 0 {
		params["product"] = product
	}
	if operator := c.Query("operator"); len(operator) != 0 {
		params["operator"] = operator
	}
	if target := c.Query("target"); len(target) != 0 {
		params["target"] = target
	}
	if str := c.Query("action"); len(str) != 0 {
		action, _ := strconv.Atoi(str)
		if db.ValidAction(action) {
			params["action"] = action
		}
	}

	pageStr := c.DefaultQuery("page", "1")
	page, _ := strconv.Atoi(pageStr)
	countStr := c.DefaultQuery("count", "15")
	count, _ := strconv.Atoi(countStr)

	total, list, err := db.GetLogList(params, (page-1)*count, count)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}
	c.Header("X-Current-Page", fmt.Sprint(page))
	c.Header("X-Resource-Total", fmt.Sprint(total))
	c.Header("X-Page-Size", fmt.Sprint(count))
	c.JSON(http.StatusOK, &list)
}
