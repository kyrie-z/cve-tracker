package v0

import (
	"cve-tracker/pkg/db"
	"cve-tracker/pkg/utils"
	"fmt"
	"net/http"
	"strconv"
	"time"

	"github.com/gin-gonic/gin"
)

func queryRoleList(c *gin.Context) {

	pageStr := c.DefaultQuery("page", "1")
	page, _ := strconv.Atoi(pageStr)
	countStr := c.DefaultQuery("count", "15")
	count, _ := strconv.Atoi(countStr)

	total, list, err := db.QueryPeopleList((page-1)*count, count)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.Header("X-Current-Page", fmt.Sprint(page))
	c.Header("X-Resource-Total", fmt.Sprint(total))
	c.Header("X-Page-Size", fmt.Sprint(count))
	c.JSON(http.StatusOK, &list)
}

func patchRoleInfo(c *gin.Context) {
	var roleInfo db.Authority
	roleInfo.Username = c.GetString("username")
	(&roleInfo).First()
	if roleInfo.Level != db.SuperAdministrator && roleInfo.Level != db.Administrator {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid authority, No modification permission"})
		return
	}
	var values db.Authority
	err := c.ShouldBind(&values)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	if len(values.Username) == 0 || values.Username == "root" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "no username data"})
		return
	}

	if values.Level > roleInfo.Level {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid permission level"})
		return
	}
	err = db.RoleUpdate(&values)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	(&db.Log{
		Operator:    c.GetString("username"),
		Action:      db.LogActionModifyRole,
		Target:      values.Username,
		Description: c.GetString("username") + " modify " + values.Username + " permissions.",
		Content:     utils.ToString(values),
		Time_at:     time.Now().Format("2006-01-02 15:04:05"),
	}).InsertLog()

	c.JSON(http.StatusOK, "update success")
}
