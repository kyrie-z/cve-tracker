package v0

import (
	"cve-tracker/pkg/config"
	"cve-tracker/pkg/db"
	"cve-tracker/pkg/ldap"
	"cve-tracker/pkg/utils"
	"net/http"
	"strings"

	"github.com/gin-gonic/gin"
)

// login
func login(c *gin.Context) {
	var data = struct {
		Account  string `json:"account"`
		Password string `josn:"password"`
	}{}
	err := c.ShouldBindJSON(&data)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	ldapc := config.GetConfig(config.ConfigFilePath).LDAP
	cli, err := ldap.NewClient(ldapc.Host, ldapc.Port, ldapc.Dn, ldapc.Password, ldapc.UserSearch)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	nameCN, err := cli.CheckUserPassword(data.Account, data.Password)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	cli.Close()

	token, expires, err := db.GetToken(nameCN)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	token = "Bearer " + token
	tk := db.Session{
		Token:    token,
		Username: nameCN,
		Expires:  expires,
	}
	err = tk.Create()
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	c.Header("Authorization", token)

	(&db.Log{
		Operator:    nameCN,
		Action:      db.LogActionLogin,
		Target:      nameCN,
		Description: db.LogActionLogin.String(),
		Content:     nameCN + " 登陆",
		Time_at:     utils.NowTime(),
	}).InsertLog()

	c.JSON(http.StatusOK, "login success")
}

//logout
func logout(c *gin.Context) {
	authHeader := c.GetHeader("Authorization")
	parts := strings.SplitN(authHeader, " ", 2)
	if !(len(parts) == 2 && parts[0] == "Bearer") {
		c.JSON(http.StatusBadRequest, gin.H{"error": "request does not contain the valid token."})
	}

	tk := &db.Session{Token: authHeader}

	err := tk.Get()
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	err = tk.Delete()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}
	(&db.Log{
		Operator:    tk.Username,
		Action:      db.LogActionLogout,
		Target:      tk.Username,
		Description: db.LogActionLogout.String(),
		Content:     tk.Username + " 退出",
		Time_at:     utils.NowTime(),
	}).InsertLog()

	c.JSON(http.StatusOK, "logout success")
}
