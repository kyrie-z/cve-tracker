package v0

import (
	"cve-tracker/pkg/db"
	"cve-tracker/pkg/utils"
	"fmt"
	"net/http"
	"os"
	"time"

	"github.com/gin-gonic/gin"
)

/*
Initialize the list of maintainers (json format)
*/
func initMaintainer(c *gin.Context) {
	product := c.Param("product")
	if len(product) == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid product"})
		return
	}
	file, err := c.FormFile("maintainer")
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	path, _ := os.Getwd()
	dst := fmt.Sprintf("%s/data/%s-init-maintainer", path, product)
	err = c.SaveUploadedFile(file, dst)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	err = db.SyncMaintainerDate(dst, product)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	(&db.Log{
		Product:     product,
		Operator:    c.GetString("username"),
		Action:      db.LogActionInitMaintainerInfo,
		Description: db.LogActionInitMaintainerInfo.String(),
		Content:     db.LogActionInitMaintainerInfo.String(),
		Time_at:     time.Now().Format("2006-01-02 15:04:05"),
	}).InsertLog()

	c.JSON(http.StatusOK, "init maintainer ...")

}

//Query maintainer list
func queryMaintainerList(c *gin.Context) {
	product := c.Param("product")
	if len(product) == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid product"})
		return
	}
	var params = make(map[string]string)
	if pkg := c.Query("package"); len(pkg) != 0 {
		params["package"] = pkg
	}
	if maintainer := c.Query("maintainer"); len(maintainer) != 0 {
		params["maintainer"] = maintainer
	}
	if area := c.Query("area"); len(area) != 0 {
		params["area"] = area
	}
	list, total, err := db.GetMaintainerList(params, product)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error})
		return
	}

	c.Header("X-Resource-Total", fmt.Sprint(total))
	c.JSON(http.StatusOK, list)
}

//Update maintainer info
func updateMaintainer(c *gin.Context) {
	product := c.Param("product")
	if len(product) == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid product"})
		return
	}

	var roleInfo db.Authority
	roleInfo.Username = c.GetString("username")
	(&roleInfo).First()
	if roleInfo.Level != db.SuperAdministrator && roleInfo.Level != db.Administrator {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid authority, No modification permission"})
		return
	}

	var maintainerList db.MaintainerList
	err := c.ShouldBind(&maintainerList)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	if len(maintainerList) == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "no data has bind"})
		return
	}
	for _, value := range maintainerList {
		if len(value.Package) == 0 {
			c.JSON(http.StatusBadRequest, gin.H{"error": "no package data has error"})
			return
		}
		maintainerInfo, err := db.GetMaintainerInfo(value.Package, product)
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "maintainer information cannot be found in the database"})
			return
		}
		err = maintainerInfo.Update(&value, product)
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{
				"error": err.Error(),
			})
			return
		}

		(&db.Log{
			Product:     product,
			Operator:    c.GetString("username"),
			Action:      db.LogActionModifyMaintainerInfo,
			Target:      value.Package,
			Description: db.LogActionModifyMaintainerInfo.String() + ": " + value.Package,
			Content:     utils.ToString(value),
			Time_at:     time.Now().Format("2006-01-02 15:04:05"),
		}).InsertLog()
	}
	c.JSON(http.StatusOK, "change success")
}

// add new package maintainer info
func addMaintainer(c *gin.Context) {
	product := c.Param("product")
	if len(product) == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid product"})
		return
	}

	var roleInfo db.Authority
	roleInfo.Username = c.GetString("username")
	(&roleInfo).First()
	if roleInfo.Level != db.SuperAdministrator && roleInfo.Level != db.Administrator {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid authority, No modification permission"})
		return
	}

	var info db.Maintainer
	err := c.ShouldBind(&info)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": err.Error()})
		return
	}

	info.FirstOrCreate(product)

	(&db.Log{
		Product:     product,
		Operator:    c.GetString("username"),
		Action:      db.LogActionCreateMaintainerInfo,
		Target:      info.Package,
		Description: db.LogActionCreateMaintainerInfo.String() + ": " + info.Package,
		Content:     utils.ToString(info),
		Time_at:     time.Now().Format("2006-01-02 15:04:05"),
	}).InsertLog()

	c.JSON(http.StatusOK, info)

}
