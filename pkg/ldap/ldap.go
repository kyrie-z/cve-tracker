package ldap

import (
	"crypto/tls"
	"cve-tracker/pkg/db"
	"fmt"
	"strings"
	"time"

	ldapBase "github.com/go-ldap/ldap/v3"
)

// Client ldap wrapper
type Client struct {
	conn       *ldapBase.Conn
	dn         string
	password   string
	userSearch string
}

// NewClient New LDAP client
func NewClient(host string, port int, dn, password, userSearch string) (client *Client, err error) {
	var conn *ldapBase.Conn
	ldapBase.DefaultTimeout = 20 * time.Second
	if port == 636 {
		conn, err = ldapBase.DialTLS("tcp", host+":"+fmt.Sprint(port),
			&tls.Config{InsecureSkipVerify: true})
	} else {
		conn, err = ldapBase.Dial("tcp", host+":"+fmt.Sprint(port))
	}
	if err != nil {
		return
	}
	client = &Client{
		conn:       conn,
		dn:         dn,
		password:   password,
		userSearch: userSearch,
	}
	return
}

func (c *Client) prepare() (err error) {
	err = c.conn.Bind(c.dn, c.password)
	if err != nil {
		err = fmt.Errorf("LDAP dn is not set properly: %s", err)
	}
	return
}

// CheckUserPassword auth user and add employee info to database.
func (c *Client) CheckUserPassword(account, password string) (name string, err error) {
	err = c.prepare()
	if err != nil {
		return
	}
	filterKey := "uid"
	account = strings.Split(account, "@")[0]
	if strings.HasPrefix(account, "ut") {
		filterKey = "employeeNumber"
	}
	filter := fmt.Sprintf("(%s=%s)", filterKey, ldapBase.EscapeFilter(account))
	req := ldapBase.NewSearchRequest(
		c.userSearch, ldapBase.ScopeWholeSubtree, ldapBase.NeverDerefAliases,
		0, 0, false,
		filter,
		[]string{"dn", "cn", "uid", "mail", "employeeNumber"}, nil)
	resp, err := c.conn.Search(req)
	if err != nil {
		return
	}
	if len(resp.Entries) != 1 {
		err = fmt.Errorf("ldap failed to match")
		return
	}
	userDn := resp.Entries[0].DN
	err = c.conn.Bind(userDn, password)
	if err != nil {
		err = fmt.Errorf("invalid account or password")
		return
	}

	(&db.Employee{
		EmployeeID: resp.Entries[0].GetAttributeValue("employeeNumber"),
		Name:       resp.Entries[0].GetAttributeValue("uid"),
		NameCN:     resp.Entries[0].GetAttributeValue("cn"),
		Email:      resp.Entries[0].GetAttributeValue("mail"),
	}).RecordEmployee()
	return resp.Entries[0].GetAttributeValue("cn"), nil
}

// Close close ldap connection
func (c *Client) Close() {
	c.conn.Close()
}
