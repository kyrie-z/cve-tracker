package db

import (
	"cve-tracker/pkg/utils"
)

//Query the number of vulnerabilities based on different query types and keywords
func QueryCount(sort, key, product string) *[7]int {
	db := getHandle(product)
	if db == nil {
		return nil
	}

	cveDB := db.Table("cve")
	kernelDB := db.Table("kernel")
	var count = [7]int{0}
	if sort == "high" { //高危漏洞
		cveDB.Where("score >= 7 and score <= 10 and status = ?", key).Count(&count[0])    //系统
		kernelDB.Where("score >= 7 and score <= 10 and status = ?", key).Count(&count[1]) //内核
	} else if sort == "medium" {
		cveDB.Where("score >= 4 and score <= 6.9 and status = ?", key).Count(&count[0])
		kernelDB.Where("score >= 4 and score <= 6.9 and status = ?", key).Count(&count[1])
	} else if sort == "low" {
		cveDB.Where("score >= 0 and score <= 3.9 and status = ?", key).Count(&count[0])
		kernelDB.Where("score >= 0 and score <= 3.9 and status = ?", key).Count(&count[1])
	} else {
		daily := utils.WeekDone()
		for j, v := range daily {
			if v != "" {
				if sort == "sys_daily" { //系统每日修复
					cveDB.Where("fix_at = ?", v).Count(&count[j])
				}
				if sort == "kernel_daily" {
					kernelDB.Where("fix_at = ?", v).Count(&count[j])
				}
				if sort == "sys_new_daily" { //系统每日新增
					cveDB.Where("`created_at` BETWEEN ? AND ?", v+" 00:00:00", v+" 23:59:59").Count(&count[j])

				}
				if sort == "kernel_new_daily" {
					kernelDB.Where("`created_at` BETWEEN ? AND ?", v+" 00:00:00", v+" 23:59:59").Count(&count[j])
				}
			}
		}
	}
	return &count
}
