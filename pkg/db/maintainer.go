package db

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"sync"
)

type Maintainer struct {
	Package    string `gorm:"primary_key" json:"package"`
	Maintainer string `json:"maintainer"`
	Area       string `json:"area"`
}

type MaintainerList []Maintainer

var (
	maintainerLock sync.Mutex
)

// sync maintainer info
func SyncMaintainerDate(file, product string) error {
	maintainerLock.Lock()
	defer maintainerLock.Unlock()
	fmt.Println("[NOTIFICATION] sync maintainer info start ...")

	data, err := ioutil.ReadFile(file)
	if err != nil {
		return err
	}
	var maintainerList MaintainerList
	err = json.Unmarshal(data, &maintainerList)
	if err != nil {
		return err
	}

	go func() {
		err := doMaintainerSync(maintainerList, product)
		if err != nil {
			fmt.Println(err)
			return
		}
		fmt.Println("[NOTIFICATION] sync maintainer info end !!!")
	}()

	return nil
}

// write sync maintainer info to database
func doMaintainerSync(list MaintainerList, product string) error {
	handle := getHandle(product)
	if handle == nil {
		return fmt.Errorf("No db handler found for %s, abort sync.", product)

	}
	var tx = handle.Begin()
	tx.Table("maintainer").Delete(&Maintainer{})
	for _, value := range list {
		err := tx.Create(&value).Error //创建
		if err != nil {
			tx.Rollback()
			return err
		}
	}
	return tx.Commit().Error
}

// get miantainer info form database
func GetMaintainerList(params map[string]string, product string) (MaintainerList, int64, error) {
	db := getHandle(product)
	if db == nil {
		return nil, 0, fmt.Errorf("No db handler found for product '%s'", product)
	}
	db = db.Table("maintainer")
	if param, ok := params["package"]; ok {
		db = db.Where("package = ?", param)
	}
	if param, ok := params["maintainer"]; ok {
		db = db.Where("maintainer = ?", param)
	}
	if param, ok := params["area"]; ok {
		db = db.Where("area = ?", param)
	}
	var total int64
	db.Count(&total)
	var list MaintainerList
	err := db.Find(&list).Error
	if err != nil {
		return nil, 0, err
	}
	return list, total, nil
}

//get single maintainer info
func GetMaintainerInfo(pkg, product string) (*Maintainer, error) {
	db := getHandle(product)
	if db == nil {
		return nil, fmt.Errorf("No db handler found for product '%s'", product)
	}
	var info Maintainer
	err := db.Table("maintainer").Where("package = ? ", pkg).Find(&info).Error
	if err != nil {
		return nil, err
	}
	return &info, nil

}

//update miantainer info
func (m *Maintainer) Update(diff *Maintainer, product string) error {
	db := getHandle(product)
	if db == nil {
		return fmt.Errorf("No db handler found for product '%s'", product)
	}
	return db.Model(&m).Where("package = ?", m.Package).Updates(diff).Error
}

//query package by area
func AreaToPackage(area []string, product string) ([]string, error) {
	db := getHandle(product)
	if db == nil {
		return nil, fmt.Errorf("No db handler found for product '%s'", product)
	}
	var list MaintainerList
	err := db.Table("maintainer").Where("area IN (?) ", area).Find(&list).Error
	if err != nil {
		return nil, err
	}
	var pkgList []string
	for _, v := range list {
		pkgList = append(pkgList, v.Package)
	}
	return pkgList, nil
}

//query package by maintainer
func MaintainerToPackage(maintainer, product string) ([]string, error) {
	db := getHandle(product)
	if db == nil {
		return nil, fmt.Errorf("No db handler found for product '%s'", product)
	}
	var list MaintainerList
	err := db.Table("maintainer").Where("maintainer = ? ", maintainer).Find(&list).Error
	if err != nil {
		return nil, err
	}
	var pkgList []string
	for _, v := range list {
		pkgList = append(pkgList, v.Package)
	}
	return pkgList, nil
}

//create a new maintainer info
func (m *Maintainer) FirstOrCreate(product string) error {
	handle := getHandle(product)
	if handle == nil {
		return fmt.Errorf("No db handler found for %s, abort sync.", product)

	}
	return handle.FirstOrCreate(m).Error
}
