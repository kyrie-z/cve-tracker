package db

import (
	"time"
)

// User authority
type Authority struct {
	Username  string    `json:"username" gorm:"primary_key"`
	Level     int       `json:"level"`
	UpdatedAt time.Time `json:"updated_at"`
}

type AuthorityList []*Authority

//权限划分
const (
	Visitor            int = iota //访者
	Developer                     //维护者
	Administrator                 //管理员
	SuperAdministrator int = 9    //超级管理员
)

func RoleQueryOrCreate(a *Authority) *Authority {
	db := getCommonHandle()
	var roleInfo Authority
	db.Model(&Authority{}).Where("username = ?", a.Username).FirstOrCreate(a).Find(&roleInfo)
	return &roleInfo
}

func (a *Authority) First() (err error) {
	db := getCommonHandle()
	return db.Model(&Authority{}).Where("username = ?", a.Username).First(a).Error

}

func QueryPeopleList(offset, limit int) (int64, AuthorityList, error) {
	db := getCommonHandle()
	var list AuthorityList
	var total int64
	err := db.Model(&Authority{}).Count(&total).Offset(offset).Limit(limit).Find(&list).Error
	if err != nil {
		return 0, nil, err
	}

	return total, list, nil
}

func RoleUpdate(a *Authority) error {
	db := getCommonHandle()
	return db.Model(&Authority{}).Where("username = ?", a.Username).Update("level", a.Level).Error
}
