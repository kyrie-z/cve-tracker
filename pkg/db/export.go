package db

import "fmt"

type ExCve struct {
	Cve           string `json:"cve"`
	Package       string `json:"package"`
	Status        string `json:"status"`
	Fixed_version string `json:"fixed_version"`
}

type Export struct {
	ExCve
	Binary       []string
	Os           []string
	Architecture []string
}

type ExportList []*Export

func GetAllCVE(product string) (ExportList, int64, error) {
	db := getHandle(product)
	if db == nil {
		return nil, 0, fmt.Errorf("No db handler found for product '%s'", product)
	}
	var cveList ExportList
	db = db.Table("cve")
	err := db.Model(&CVE{}).Select("cve,package,status,fixed_version").Find(&cveList).Error
	if err != nil {
		return nil, 0, err
	}
	var total int64
	db.Count(&total)

	return cveList, total, nil
}

func GetAllBinary(product string) (BinaryList, error) {
	db := getHandle(product)
	if db == nil {
		return nil, fmt.Errorf("No db handler found for product '%s'", product)
	}
	var binList BinaryList
	err := db.Model(&Binary{}).Find(&binList).Error
	if err != nil {
		return nil, err
	}

	return binList, nil
}

func IntegrateCVE(e ExportList, b BinaryList) ExportList {
	for _, cve := range e {
		for _, source := range b {
			if cve.Package == source.Source {
				cve.Binary = append(cve.Binary, source.Binary)
			}
		}
		cve.Os = []string{"专业版", "个人版", "企业版", "社区版"}
		cve.Architecture = []string{"x86", "arm64", "mips64el"}
	}
	return e
}
