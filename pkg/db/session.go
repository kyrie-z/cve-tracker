package db

import (
	"errors"
	"time"

	"github.com/dgrijalva/jwt-go"
)

// Session user login cookie
type Session struct {
	Token    string `gorm:"primary_key" json:"token"`
	Username string `json:"username"`
	Expires  int64  `json:"expires"`
}

var jwtKey = []byte("CVE Security Bug Tracker")

type Claims struct {
	Username string `json:"username"`
	jwt.StandardClaims
}

//Get token and expires.
func GetToken(username string) (string, int64, error) {
	expireTime := time.Now().Add(1 * 24 * time.Hour)
	claims := &Claims{
		Username: username,
		StandardClaims: jwt.StandardClaims{
			ExpiresAt: expireTime.Unix(), //expires time
			IssuedAt:  time.Now().Unix(),
			Issuer:    "CVE Security Bug Tracker",
			// Subject:   "token",
		},
	}
	jwtToken := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	token, err := jwtToken.SignedString(jwtKey)
	if err != nil {
		return "", 0, errors.New("Failed to generate token")
	}
	return token, claims.ExpiresAt, nil
}

// Parse Token
func ParseToken(tokenString string) (*Claims, error) {
	token, err := jwt.ParseWithClaims(tokenString, &Claims{}, func(token *jwt.Token) (i interface{}, err error) {
		return jwtKey, nil
	})
	if err != nil {
		return nil, err
	}
	if claims, ok := token.Claims.(*Claims); ok && token.Valid { // 校验token
		return claims, nil
	}
	return nil, errors.New("invalid token")
}

// Create session
func (s *Session) Create() error {
	return getCommonHandle().Create(s).Error
}

// Get session
func (s *Session) Get() error {
	return getCommonHandle().Where("token = ?", s.Token).First(s).Error
}

// Delete session
func (s *Session) Delete() error {
	return getCommonHandle().Where("username =?", s.Username).Delete(&Session{}).Error
}

// Delete all expired token
func SessionClean() error {
	db := getCommonHandle()
	var offset = 0
	var limit = 100
	var length = 100
	for length == limit {
		var sessions []*Session
		err := db.Offset(offset).Limit(limit).Find(&sessions).Error
		if err != nil {
			return err
		}
		for _, session := range sessions {
			if session.Expires > time.Now().Unix() {
				continue
			}
			db.Where("`token` = ?", session.Token).Delete(&Session{})
		}
		length = len(sessions)
		offset += len(sessions)
	}
	return nil
}
